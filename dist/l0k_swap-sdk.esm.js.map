{"version":3,"file":"l0k_swap-sdk.esm.js","sources":["../src/errors.ts","../src/constants.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/index.ts"],"sourcesContent":["// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError = true as const\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError = true as const\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\nimport { shortString } from 'starknet'\r\n\r\nconst { encodeShortString } = shortString\r\n\r\nexport enum StarknetChainId {\r\n  MAINNET = 'SN_MAIN',\r\n  TESTNET = 'SN_GOERLI'\r\n}\r\n\r\n// exports for external consumption\r\nexport type BigintIsh = JSBI | bigint | string\r\n\r\nexport enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT\r\n}\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP\r\n}\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const FEES_NUMERATOR = JSBI.BigInt(9970)\r\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\r\n\r\nexport enum SolidityType {\r\n  uint8 = 'uint8',\r\n  uint256 = 'uint256'\r\n}\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n}\r\n\r\nexport const PAIR_CONTRACT_CLASS_HASH = '0x231adde42526bad434ca2eb983efdd64472638702f87f97e6e3c084f264e06f'\r\n\r\nexport const FACTORY_ADDRESSES: {\r\n  [chainId in StarknetChainId]: string\r\n} = {\r\n  [StarknetChainId.MAINNET]: '0x01c0a36e26a8f822e0d81f20a5a562b16a8f8a3dfd99801367dd2aea8f1a87a2',\r\n  [StarknetChainId.TESTNET]: '0x06c31f39524388c982045988de3788530605ed08b10389def2e7b1dd09d19308'\r\n}\r\n\r\nexport const CONTRACT_ADDRESS_PREFIX = encodeShortString('STARKNET_CONTRACT_ADDRESS')\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { number, hash, validateAndParseAddress as getAddress } from 'starknet'\r\n\r\nimport {\r\n  BigintIsh,\r\n  ZERO,\r\n  ONE,\r\n  TWO,\r\n  THREE,\r\n  SolidityType,\r\n  SOLIDITY_TYPE_MAXIMA,\r\n  FACTORY_ADDRESSES,\r\n  PAIR_CONTRACT_CLASS_HASH,\r\n  CONTRACT_ADDRESS_PREFIX\r\n} from './constants'\r\nimport { Token } from '.'\r\n\r\nconst { toBN } = number\r\nconst { computeHashOnElements, pedersen } = hash\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    // warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n\r\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\r\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh)\r\n}\r\n\r\n// mock the on-chain sqrt function\r\nexport function sqrt(y: JSBI): JSBI {\r\n  validateSolidityTypeInstance(y, SolidityType.uint256)\r\n  let z: JSBI = ZERO\r\n  let x: JSBI\r\n  if (JSBI.greaterThan(y, THREE)) {\r\n    z = y\r\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\r\n    while (JSBI.lessThan(x, z)) {\r\n      z = x\r\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\r\n    }\r\n  } else if (JSBI.notEqual(y, ZERO)) {\r\n    z = ONE\r\n  }\r\n  return z\r\n}\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop() ?? null : null\r\n  }\r\n}\r\n\r\nexport function getPairAddress(tokenA: Token, tokenB: Token) {\r\n  const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checksr\r\n  const salt = pedersen([tokens[0].address, tokens[1].address])\r\n  const constructorCalldataHash = computeHashOnElements([])\r\n\r\n  return computeHashOnElements([CONTRACT_ADDRESS_PREFIX, FACTORY_ADDRESSES[tokenA.chainId], salt, PAIR_CONTRACT_CLASS_HASH, constructorCalldataHash])\r\n}\r\n\r\nexport function isEqualAddress(addressA: string, addressB: string): boolean {\r\n  return number.toBN(addressA).eq(number.toBN(addressB))\r\n}\r\n\r\nexport function sortsBefore(addressA: string, addressB: string): boolean {\r\n  return toBN(addressA).lt(toBN(addressB))\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { StarknetChainId, SolidityType } from '../constants'\r\nimport { isEqualAddress, sortsBefore, validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token {\r\n  public readonly decimals: number\r\n  public readonly symbol?: string\r\n  public readonly name?: string\r\n  public readonly chainId: StarknetChainId\r\n  public readonly address: string\r\n\r\n  public constructor(chainId: StarknetChainId, address: string, decimals: number, symbol?: string, name?: string) {\r\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\r\n\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true\r\n    }\r\n    return this.chainId === other.chainId && isEqualAddress(this.address, other.address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n\r\n    return sortsBefore(this.address, other.address)\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Token, currencyB: Token): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport _Decimal from 'decimal.js-light'\r\nimport _Big from 'big.js'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding } from '../../constants'\r\nimport { ONE } from '../../constants'\r\nimport { parseBigintIsh } from '../../utils'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: 0,\r\n  [Rounding.ROUND_HALF_UP]: 1,\r\n  [Rounding.ROUND_UP]: 3\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\r\n    this.numerator = parseBigintIsh(numerator)\r\n    this.denominator = parseBigintIsh(denominator)\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator))\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator))\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\r\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number, format: object = { groupSeparator: '' }, rounding: Rounding = Rounding.ROUND_HALF_UP): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\r\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number, format: object = { groupSeparator: '' }, rounding: Rounding = Rounding.ROUND_HALF_UP): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport toFormat from 'toformat'\r\n\r\nimport { BigintIsh, Rounding, SolidityType, TEN } from '../../constants'\r\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\r\nimport { Fraction } from './fraction'\r\nimport _Big from 'big.js'\r\n\r\nconst Big = toFormat(_Big)\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token\r\n\r\n  // amount _must_ be raw, i.e. in the native representation\r\n  public constructor(token: Token, amount: BigintIsh) {\r\n    const parsedAmount = parseBigintIsh(amount)\r\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\r\n\r\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\r\n    this.token = token\r\n  }\r\n\r\n  public get raw(): JSBI {\r\n    return this.numerator\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    invariant(this.token.equals(other.token), 'TOKEN')\r\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\r\n  }\r\n\r\n  public toSignificant(significantDigits = 12, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\r\n    return super.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = this.token.decimals, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\r\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\r\n    return super.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.token.decimals\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\r\n  }\r\n}\r\n","import { Token } from '../token'\r\nimport { TokenAmount } from './tokenAmount'\r\nimport { currencyEquals } from '../token'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\n\r\nimport { BigintIsh, Rounding, TEN } from '../../constants'\r\nimport { Route } from '../route'\r\nimport { Fraction } from './fraction'\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseCurrency: Token // input i.e. denominator\r\n  public readonly quoteCurrency: Token // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  public static fromRoute(route: Route): Price {\r\n    const prices: Price[] = []\r\n    for (const [i, pair] of route.pairs.entries()) {\r\n      prices.push(\r\n        route.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\r\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\r\n      )\r\n    }\r\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n  }\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(baseCurrency: Token, quoteCurrency: Token, denominator: BigintIsh, numerator: BigintIsh) {\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  public multiply(other: Price): Price {\r\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  // performs floor division on overflow\r\n  public quote(currencyAmount: TokenAmount): TokenAmount {\r\n    invariant(currencyEquals(currencyAmount.token, this.baseCurrency), 'TOKEN')\r\n\r\n    return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\r\n  }\r\n\r\n  public toSignificant(significantDigits = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { BigintIsh, MINIMUM_LIQUIDITY, ZERO, ONE, FIVE, FEES_NUMERATOR, FEES_DENOMINATOR, StarknetChainId } from '../constants'\r\nimport { sqrt, parseBigintIsh, getPairAddress } from '../utils'\r\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\r\nimport { Token } from './token'\r\n\r\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  readonly tokenAmounts: [TokenAmount, TokenAmount]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n\r\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\r\n      PAIR_ADDRESS_CACHE = {\r\n        ...PAIR_ADDRESS_CACHE,\r\n        [tokens[0].address]: {\r\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\r\n          [tokens[1].address]: getPairAddress(tokenA, tokenB)\r\n        }\r\n      }\r\n    }\r\n\r\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\r\n  }\r\n\r\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    this.liquidityToken = new Token(\r\n      tokenAmounts[0].token.chainId,\r\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\r\n      18,\r\n      '10k Swap LP',\r\n      '10k Swap'\r\n    )\r\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price {\r\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price {\r\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): StarknetChainId {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].token\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].token\r\n  }\r\n\r\n  public get reserve0(): TokenAmount {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): TokenAmount {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.token)\r\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\r\n    const outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator))\r\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\r\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.raw, ZERO) ||\r\n      JSBI.equal(this.reserve1.raw, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.token)\r\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\r\n    const inputAmount = new TokenAmount(\r\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\r\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return new TokenAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(token: Token, totalSupply: TokenAmount, liquidity: TokenAmount, feeOn = false, kLast?: BigintIsh): TokenAmount {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: TokenAmount\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = parseBigintIsh(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw))\r\n  }\r\n}\r\n","import { StarknetChainId } from '../constants'\r\nimport invariant from 'tiny-invariant'\r\n\r\nimport { Token } from './token'\r\nimport { Pair } from './pair'\r\nimport { Price } from './fractions/price'\r\n\r\nexport class Route {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: Token\r\n  public readonly output: Token\r\n  public readonly midPrice: Price\r\n\r\n  public constructor(pairs: Pair[], input: Token, output?: Token) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(\r\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n    invariant((input instanceof Token && pairs[0].involvesToken(input)) || 'INPUT')\r\n    invariant(typeof output === 'undefined' || (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)), 'OUTPUT')\r\n\r\n    const path: Token[] = [input]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.midPrice = Price.fromRoute(this)\r\n    this.input = input\r\n    this.output = output ?? path[path.length - 1]\r\n  }\r\n\r\n  public get chainId(): StarknetChainId {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Rounding, _100 } from '../../constants'\r\nimport { Fraction } from './fraction'\r\n\r\nconst _100_PERCENT = new Fraction(_100)\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\nimport {  StarknetChainId, ONE, TradeType, ZERO } from '../constants'\r\nimport { sortedInsert } from '../utils'\r\nimport { Fraction } from './fractions/fraction'\r\nimport { Percent } from './fractions/percent'\r\nimport { Price } from './fractions/price'\r\nimport { TokenAmount } from './fractions/tokenAmount'\r\nimport { Pair } from './pair'\r\nimport { Route } from './route'\r\nimport { currencyEquals, Token } from './token'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nfunction computePriceImpact(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\r\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\r\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\r\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\r\n  return new Percent(slippage.numerator, slippage.denominator)\r\n}\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput {\r\n  readonly inputAmount: TokenAmount\r\n  readonly outputAmount: TokenAmount\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\r\n  // must have same input and output token for comparison\r\n  invariant(currencyEquals(a.inputAmount.token, b.inputAmount.token), 'INPUT_CURRENCY')\r\n  invariant(currencyEquals(a.outputAmount.token, b.outputAmount.token), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator(a: Trade, b: Trade) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through.\r\n   */\r\n  public readonly route: Route\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: TokenAmount\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: TokenAmount\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price\r\n  /**\r\n   * The mid price after the trade executes assuming no slippage.\r\n   */\r\n  public readonly nextMidPrice: Price\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn(route: Route, amountIn: TokenAmount): Trade {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut(route: Route, amountOut: TokenAmount): Trade {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\r\n    const amounts: TokenAmount[] = new Array(route.path.length)\r\n    const nextPairs: Pair[] = new Array(route.pairs.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(currencyEquals(amount.token, route.input), 'INPUT')\r\n      amounts[0] = amount\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\r\n        amounts[i + 1] = outputAmount\r\n        nextPairs[i] = nextPair\r\n      }\r\n    } else {\r\n      invariant(currencyEquals(amount.token, route.output), 'OUTPUT')\r\n      amounts[amounts.length - 1] = amount\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\r\n        amounts[i - 1] = inputAmount\r\n        nextPairs[i - 1] = nextPair\r\n      }\r\n    }\r\n\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : amounts[0]\r\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\r\n    this.executionPrice = new Price(this.inputAmount.token, this.outputAmount.token, this.inputAmount.raw, this.outputAmount.raw)\r\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.raw).quotient\r\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\r\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyAmountIn exact amount of input token to spend\r\n   * @param currencyOut the desired token out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn(\r\n    pairs: Pair[],\r\n    currencyAmountIn: TokenAmount,\r\n    currencyOut: Token,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountIn: TokenAmount = currencyAmountIn,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: StarknetChainId | undefined =\r\n      currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountIn = currencyAmountIn\r\n    const tokenOut = currencyOut\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: TokenAmount\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if ((error as any).isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.token.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(new Route([...currentPairs, pair], originalAmountIn.token, currencyOut), originalAmountIn, TradeType.EXACT_INPUT),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          amountOut,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [...currentPairs, pair],\r\n          originalAmountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the token to spend\r\n   * @param currencyAmountOut the exact amount of token out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut(\r\n    pairs: Pair[],\r\n    currencyIn: Token,\r\n    currencyAmountOut: TokenAmount,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    originalAmountOut: TokenAmount = currencyAmountOut,\r\n    bestTrades: Trade[] = []\r\n  ): Trade[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n    const chainId: StarknetChainId | undefined =\r\n      currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined\r\n    invariant(chainId !== undefined, 'CHAIN_ID')\r\n\r\n    const amountOut = currencyAmountOut\r\n    const tokenIn = currencyIn\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: TokenAmount\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if ((error as any).isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.token.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(new Route([pair, ...currentPairs], currencyIn, originalAmountOut.token), originalAmountOut, TradeType.EXACT_OUTPUT),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          amountIn,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1\r\n          },\r\n          [pair, ...currentPairs],\r\n          originalAmountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { TradeType } from './constants'\r\nimport invariant from 'tiny-invariant'\r\nimport { uint256, number } from 'starknet'\r\nimport { Percent, Trade } from './entities'\r\n\r\ninterface Uint256 {\r\n  low: number.BigNumberish\r\n  high: number.BigNumberish\r\n}\r\n\r\nconst { bnToUint256 } = uint256\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: string[]\r\n}\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\r\n    invariant(options.ttl > 0, 'TTL')\r\n\r\n    const to: string = options.recipient\r\n    const amountIn: Uint256 = bnToUint256(trade.maximumAmountIn(options.allowedSlippage).raw.toString())\r\n    const amountOut: Uint256 = bnToUint256(trade.minimumAmountOut(options.allowedSlippage).raw.toString())\r\n    const path: string[] = trade.route.path.map(token => token.address)\r\n    const deadline = `${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString()}`\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: string[]\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'\r\n        // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        args = [\r\n          amountIn.low.toString(),\r\n          amountIn.high.toString(),\r\n          amountOut.low.toString(),\r\n          amountOut.high.toString(),\r\n          path.length + '',\r\n          ...path,\r\n          to,\r\n          deadline\r\n        ]\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        methodName = 'swapTokensForExactTokens'\r\n        // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        args = [\r\n          amountOut.low.toString(),\r\n          amountOut.high.toString(),\r\n          amountIn.low.toString(),\r\n          amountIn.high.toString(),\r\n          path.length + '',\r\n          ...path,\r\n          to,\r\n          deadline\r\n        ]\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args\r\n    }\r\n  }\r\n}\r\n","import { RpcProvider, Contract, Abi } from 'starknet-v5'\r\nimport { TokenAmount } from './entities/fractions/tokenAmount'\r\nimport { Pair } from './entities/pair'\r\nimport l0kPairAbi from './abis/l0kPairAbi.json'\r\nimport invariant from 'tiny-invariant'\r\nimport ERC20 from './abis/ERC20.json'\r\nimport { StarknetChainId } from './constants'\r\nimport { Token } from './entities/token'\r\n\r\nlet TOKEN_DECIMALS_CACHE: { [StarknetChainId: string]: { [address: string]: number } } = {\r\n  [StarknetChainId.TESTNET]: {\r\n    '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7': 18 // ETH\r\n  }\r\n}\r\n\r\nasync function getDecimals(StarknetChainId: StarknetChainId, address: string, provider: RpcProvider): Promise<number> {\r\n  if (typeof TOKEN_DECIMALS_CACHE?.[StarknetChainId]?.[address] === 'number') {\r\n    return TOKEN_DECIMALS_CACHE[StarknetChainId][address]\r\n  }\r\n\r\n  const contract = new Contract(ERC20 as Abi, address, provider)\r\n\r\n  const { decimals } = (await contract.call('decimals')) as { decimals: bigint }\r\n\r\n  const _decimals = parseInt(decimals.toString())\r\n\r\n  TOKEN_DECIMALS_CACHE = {\r\n    ...TOKEN_DECIMALS_CACHE,\r\n    [StarknetChainId]: {\r\n      ...TOKEN_DECIMALS_CACHE?.[StarknetChainId],\r\n      [address]: _decimals\r\n    }\r\n  }\r\n\r\n  return _decimals\r\n}\r\n\r\n/**\r\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\r\n */\r\nexport abstract class Fetcher {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Fetch information for a given token on the given chain, using the given ethers provider.\r\n   * @param StarknetChainId chain of the token\r\n   * @param address address of the token on the chain\r\n   * @param provider provider used to fetch the token\r\n   * @param symbol optional symbol of the token\r\n   * @param name optional name of the token\r\n   */\r\n  public static async fetchTokenData(\r\n    starknetChainId: StarknetChainId,\r\n    address: string,\r\n    provider = new RpcProvider({ nodeUrl: starknetChainId }),\r\n    symbol?: string,\r\n    name?: string\r\n  ): Promise<Token> {\r\n    const parsedDecimals = await getDecimals(starknetChainId, address, provider)\r\n\r\n    return new Token(starknetChainId, address, parsedDecimals, symbol, name)\r\n  }\r\n\r\n  /**\r\n   * Fetches information about a pair and constructs a pair from the given two tokens.\r\n   * @param tokenA first token\r\n   * @param tokenB second token\r\n   * @param provider the provider to use to fetch the data\r\n   */\r\n  public static async fetchPairData(tokenA: Token, tokenB: Token, provider = new RpcProvider({ nodeUrl: tokenA.chainId })): Promise<Pair> {\r\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\r\n    const address = Pair.getAddress(tokenA, tokenB)\r\n    const { reserve0, reserve1 } = (await new Contract(l0kPairAbi as Abi, address, provider).call('getReserves', [])) as {\r\n      reserve0: bigint\r\n      reserve1: bigint\r\n    }\r\n    const balances = tokenA.sortsBefore(tokenB) ? [reserve0, reserve1] : [reserve0, reserve1]\r\n\r\n    return new Pair(new TokenAmount(tokenA, balances[0].toString()), new TokenAmount(tokenB, balances[1].toString()))\r\n  }\r\n}\r\n","import { TextEncoder, TextDecoder } from 'util'\r\nglobal && Object.assign(global, { TextDecoder, TextEncoder })\r\n\r\nimport JSBI from 'jsbi'\r\nexport { JSBI }\r\n\r\nexport * from './errors'\r\nexport * from './entities'\r\nexport * from './router'\r\nexport * from './fetcher'\r\nexport * from './utils'\r\nexport * from './constants'\r\n"],"names":["CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","encodeShortString","shortString","StarknetChainId","TradeType","Rounding","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PAIR_CONTRACT_CLASS_HASH","FACTORY_ADDRESSES","MAINNET","TESTNET","CONTRACT_ADDRESS_PREFIX","toBN","number","computeHashOnElements","hash","pedersen","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","getPairAddress","tokenA","tokenB","tokens","sortsBefore","salt","constructorCalldataHash","chainId","isEqualAddress","addressA","addressB","eq","lt","Token","decimals","symbol","equals","other","currencyEquals","currencyA","currencyB","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","undefined","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","bnToUint256","Router","swapCallParameters","trade","options","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","low","high","getDecimals","provider","TOKEN_DECIMALS_CACHE","contract","Contract","ERC20","call","_decimals","parseInt","Fetcher","fetchTokenData","starknetChainId","RpcProvider","nodeUrl","parsedDecimals","fetchPairData","l0kPairAbi","balances","global","assign","TextDecoder","TextEncoder"],"mappings":"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"}